name: Build and test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-gnu
          - os: windows-latest
            target: aarch64-pc-windows-gnu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install Cross
        run: cargo install cross

      - name: Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y gcc gcc-multilib g++-multilib

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Set environment variables
        run: echo "TARGET=${{ matrix.target }}" >> $GITHUB_ENV

      - name: Build
        run: cross build --release --target ${{ matrix.target }}

      - name: Run tests
        run: cross test --release --target ${{ matrix.target }}

      - name: Run program on Linux
        run: |
          timeout 60s cross run --target ${{ matrix.target }} -- --help
          timeout 60s cross run --target ${{ matrix.target }} -- -a 0 1
          timeout 60s cargo run --target ${{ matrix.target }} -- -V
          timeout 60s cargo run --target ${{ matrix.target }} -- --version
          timeout 60s cargo run --target ${{ matrix.target }} -- -a 0 1
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'

      - name: Run program on macOS
        run: |
          timeout 60s cross run --target ${{ matrix.target }} -- --help
          timeout 60s cross run --target ${{ matrix.target }} -- -a 0 1
          timeout 60s cargo run --target ${{ matrix.target }} -- -V
          timeout 60s cargo run --target ${{ matrix.target }} -- --version
          timeout 60s cargo run --target ${{ matrix.target }} -- -a 0 1
        if: matrix.os == 'macos-latest' && matrix.target == 'aarch64-apple-darwin'

      - name: Run program on Windows
        run: |
          timeout 60s cross run --target ${{ matrix.target }} -- --help
          timeout 60s cross run --target ${{ matrix.target }} -- -a 0 1
          timeout 60s cargo run --target ${{ matrix.target }} -- -V
          timeout 60s cargo run --target ${{ matrix.target }} -- --version
          timeout 60s cargo run --target ${{ matrix.target }} -- -a 0 1
        if: matrix.os == 'windows-latest' && matrix.target == 'x86_64-pc-windows-gnu'

      - name: Run program on Linux ARM
        run: |
          timeout 60s cross run --target ${{ matrix.target }} -- --help
          timeout 60s cross run --target ${{ matrix.target }} -- -a 0 1
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'

      - name: Run program on Linux RISCV
        run: |
          timeout 60s cross run --target ${{ matrix.target }} -- --help
          timeout 60s cross run --target ${{ matrix.target }} -- -a 0 1
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'riscv64gc-unknown-linux-gnu'

      - name: Run program on Linux ARMv7
        run: |
          timeout 60s cross run --target ${{ matrix.target }} -- --help
          timeout 60s cross run --target ${{ matrix.target }} -- -a 0 1
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'armv7-unknown-linux-gnueabihf'
