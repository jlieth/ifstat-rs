name: Build and test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-gnu
          - os: windows-latest
            target: aarch64-pc-windows-gnu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross

      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: sudo apt-get install -y gcc-multilib g++-multilib

      - name: Set environment variables
        run: echo "TARGET=${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show config
        run: cargo tree

      - name: Build and Test
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ] && [ "${{ matrix.target }}" != "x86_64-unknown-linux-gnu" ]; then
            cross build --release --target ${{ matrix.target }}
            cross test --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
            cargo test --release --target ${{ matrix.target }}
          fi

      - name: Run program on Linux
        run: |
          timeout 60s ./target/${{ matrix.target }}/release/ifstat-rs -V
          timeout 60s ./target/${{ matrix.target }}/release/ifstat-rs --version
          timeout 60s ./target/${{ matrix.target }}/release/ifstat-rs -a 0 1
        if: matrix.os == 'ubuntu-latest'

      - name: Run program on macOS
        run: |
          brew install coreutils
          gtimeout 60s ./target/${{ matrix.target }}/release/ifstat-rs -V
          gtimeout 60s ./target/${{ matrix.target }}/release/ifstat-rs --version
          gtimeout 60s ./target/${{ matrix.target }}/release/ifstat-rs -a 0 1
        if: matrix.os == 'macos-latest'

      - name: Run program on Windows
        run: |
          target\${{ matrix.target }}\release\ifstat-rs.exe -V
          target\${{ matrix.target }}\release\ifstat-rs.exe --version
          target\${{ matrix.target }}\release\ifstat-rs.exe -a 0 1
        timeout-minutes: 1
        if: matrix.os == 'windows-latest'